# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_core', [dirname(__file__)])
        except ImportError:
            import _core
            return _core
        if fp is not None:
            try:
                _mod = imp.load_module('_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _core = swig_import_helper()
    del swig_import_helper
else:
    import _core
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _core.SwigPyIterator_copy(self)

    def next(self):
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _core.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _core.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.FloatVector___nonzero__(self)

    def __bool__(self):
        return _core.FloatVector___bool__(self)

    def __len__(self):
        return _core.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _core.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.FloatVector___setitem__(self, *args)

    def pop(self):
        return _core.FloatVector_pop(self)

    def append(self, x):
        return _core.FloatVector_append(self, x)

    def empty(self):
        return _core.FloatVector_empty(self)

    def size(self):
        return _core.FloatVector_size(self)

    def swap(self, v):
        return _core.FloatVector_swap(self, v)

    def begin(self):
        return _core.FloatVector_begin(self)

    def end(self):
        return _core.FloatVector_end(self)

    def rbegin(self):
        return _core.FloatVector_rbegin(self)

    def rend(self):
        return _core.FloatVector_rend(self)

    def clear(self):
        return _core.FloatVector_clear(self)

    def get_allocator(self):
        return _core.FloatVector_get_allocator(self)

    def pop_back(self):
        return _core.FloatVector_pop_back(self)

    def erase(self, *args):
        return _core.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _core.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _core.FloatVector_push_back(self, x)

    def front(self):
        return _core.FloatVector_front(self)

    def back(self):
        return _core.FloatVector_back(self)

    def assign(self, n, x):
        return _core.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _core.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _core.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _core.FloatVector_reserve(self, n)

    def capacity(self):
        return _core.FloatVector_capacity(self)
    __swig_destroy__ = _core.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _core.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _core.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.BoolVector___nonzero__(self)

    def __bool__(self):
        return _core.BoolVector___bool__(self)

    def __len__(self):
        return _core.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _core.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.BoolVector___setitem__(self, *args)

    def pop(self):
        return _core.BoolVector_pop(self)

    def append(self, x):
        return _core.BoolVector_append(self, x)

    def empty(self):
        return _core.BoolVector_empty(self)

    def size(self):
        return _core.BoolVector_size(self)

    def swap(self, v):
        return _core.BoolVector_swap(self, v)

    def begin(self):
        return _core.BoolVector_begin(self)

    def end(self):
        return _core.BoolVector_end(self)

    def rbegin(self):
        return _core.BoolVector_rbegin(self)

    def rend(self):
        return _core.BoolVector_rend(self)

    def clear(self):
        return _core.BoolVector_clear(self)

    def get_allocator(self):
        return _core.BoolVector_get_allocator(self)

    def pop_back(self):
        return _core.BoolVector_pop_back(self)

    def erase(self, *args):
        return _core.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _core.new_BoolVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _core.BoolVector_push_back(self, x)

    def front(self):
        return _core.BoolVector_front(self)

    def back(self):
        return _core.BoolVector_back(self)

    def assign(self, n, x):
        return _core.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _core.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _core.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _core.BoolVector_reserve(self, n)

    def capacity(self):
        return _core.BoolVector_capacity(self)
    __swig_destroy__ = _core.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _core.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _core.StateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.StateVector___nonzero__(self)

    def __bool__(self):
        return _core.StateVector___bool__(self)

    def __len__(self):
        return _core.StateVector___len__(self)

    def __getslice__(self, i, j):
        return _core.StateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.StateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.StateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.StateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.StateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.StateVector___setitem__(self, *args)

    def pop(self):
        return _core.StateVector_pop(self)

    def append(self, x):
        return _core.StateVector_append(self, x)

    def empty(self):
        return _core.StateVector_empty(self)

    def size(self):
        return _core.StateVector_size(self)

    def swap(self, v):
        return _core.StateVector_swap(self, v)

    def begin(self):
        return _core.StateVector_begin(self)

    def end(self):
        return _core.StateVector_end(self)

    def rbegin(self):
        return _core.StateVector_rbegin(self)

    def rend(self):
        return _core.StateVector_rend(self)

    def clear(self):
        return _core.StateVector_clear(self)

    def get_allocator(self):
        return _core.StateVector_get_allocator(self)

    def pop_back(self):
        return _core.StateVector_pop_back(self)

    def erase(self, *args):
        return _core.StateVector_erase(self, *args)

    def __init__(self, *args):
        this = _core.new_StateVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _core.StateVector_push_back(self, x)

    def front(self):
        return _core.StateVector_front(self)

    def back(self):
        return _core.StateVector_back(self)

    def assign(self, n, x):
        return _core.StateVector_assign(self, n, x)

    def resize(self, *args):
        return _core.StateVector_resize(self, *args)

    def insert(self, *args):
        return _core.StateVector_insert(self, *args)

    def reserve(self, n):
        return _core.StateVector_reserve(self, n)

    def capacity(self):
        return _core.StateVector_capacity(self)
    __swig_destroy__ = _core.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _core.StateVector_swigregister
StateVector_swigregister(StateVector)

class PropVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _core.PropVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.PropVector___nonzero__(self)

    def __bool__(self):
        return _core.PropVector___bool__(self)

    def __len__(self):
        return _core.PropVector___len__(self)

    def __getslice__(self, i, j):
        return _core.PropVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.PropVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.PropVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.PropVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.PropVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.PropVector___setitem__(self, *args)

    def pop(self):
        return _core.PropVector_pop(self)

    def append(self, x):
        return _core.PropVector_append(self, x)

    def empty(self):
        return _core.PropVector_empty(self)

    def size(self):
        return _core.PropVector_size(self)

    def swap(self, v):
        return _core.PropVector_swap(self, v)

    def begin(self):
        return _core.PropVector_begin(self)

    def end(self):
        return _core.PropVector_end(self)

    def rbegin(self):
        return _core.PropVector_rbegin(self)

    def rend(self):
        return _core.PropVector_rend(self)

    def clear(self):
        return _core.PropVector_clear(self)

    def get_allocator(self):
        return _core.PropVector_get_allocator(self)

    def pop_back(self):
        return _core.PropVector_pop_back(self)

    def erase(self, *args):
        return _core.PropVector_erase(self, *args)

    def __init__(self, *args):
        this = _core.new_PropVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _core.PropVector_push_back(self, x)

    def front(self):
        return _core.PropVector_front(self)

    def back(self):
        return _core.PropVector_back(self)

    def assign(self, n, x):
        return _core.PropVector_assign(self, n, x)

    def resize(self, *args):
        return _core.PropVector_resize(self, *args)

    def insert(self, *args):
        return _core.PropVector_insert(self, *args)

    def reserve(self, n):
        return _core.PropVector_reserve(self, n)

    def capacity(self):
        return _core.PropVector_capacity(self)
    __swig_destroy__ = _core.delete_PropVector
    __del__ = lambda self: None
PropVector_swigregister = _core.PropVector_swigregister
PropVector_swigregister(PropVector)

class AgentProp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentProp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentProp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["R_safe"] = _core.AgentProp_R_safe_set
    __swig_getmethods__["R_safe"] = _core.AgentProp_R_safe_get
    if _newclass:
        R_safe = _swig_property(_core.AgentProp_R_safe_get, _core.AgentProp_R_safe_set)
    __swig_setmethods__["R_reach"] = _core.AgentProp_R_reach_set
    __swig_getmethods__["R_reach"] = _core.AgentProp_R_reach_get
    if _newclass:
        R_reach = _swig_property(_core.AgentProp_R_reach_get, _core.AgentProp_R_reach_set)
    __swig_setmethods__["L_car"] = _core.AgentProp_L_car_set
    __swig_getmethods__["L_car"] = _core.AgentProp_L_car_get
    if _newclass:
        L_car = _swig_property(_core.AgentProp_L_car_get, _core.AgentProp_L_car_set)
    __swig_setmethods__["W_car"] = _core.AgentProp_W_car_set
    __swig_getmethods__["W_car"] = _core.AgentProp_W_car_get
    if _newclass:
        W_car = _swig_property(_core.AgentProp_W_car_get, _core.AgentProp_W_car_set)
    __swig_setmethods__["L_axis"] = _core.AgentProp_L_axis_set
    __swig_getmethods__["L_axis"] = _core.AgentProp_L_axis_get
    if _newclass:
        L_axis = _swig_property(_core.AgentProp_L_axis_get, _core.AgentProp_L_axis_set)
    __swig_setmethods__["R_laser"] = _core.AgentProp_R_laser_set
    __swig_getmethods__["R_laser"] = _core.AgentProp_R_laser_get
    if _newclass:
        R_laser = _swig_property(_core.AgentProp_R_laser_get, _core.AgentProp_R_laser_set)
    __swig_setmethods__["N_laser"] = _core.AgentProp_N_laser_set
    __swig_getmethods__["N_laser"] = _core.AgentProp_N_laser_get
    if _newclass:
        N_laser = _swig_property(_core.AgentProp_N_laser_get, _core.AgentProp_N_laser_set)
    __swig_setmethods__["K_vel"] = _core.AgentProp_K_vel_set
    __swig_getmethods__["K_vel"] = _core.AgentProp_K_vel_get
    if _newclass:
        K_vel = _swig_property(_core.AgentProp_K_vel_get, _core.AgentProp_K_vel_set)
    __swig_setmethods__["K_phi"] = _core.AgentProp_K_phi_set
    __swig_getmethods__["K_phi"] = _core.AgentProp_K_phi_get
    if _newclass:
        K_phi = _swig_property(_core.AgentProp_K_phi_get, _core.AgentProp_K_phi_set)
    __swig_setmethods__["init_x"] = _core.AgentProp_init_x_set
    __swig_getmethods__["init_x"] = _core.AgentProp_init_x_get
    if _newclass:
        init_x = _swig_property(_core.AgentProp_init_x_get, _core.AgentProp_init_x_set)
    __swig_setmethods__["init_y"] = _core.AgentProp_init_y_set
    __swig_getmethods__["init_y"] = _core.AgentProp_init_y_get
    if _newclass:
        init_y = _swig_property(_core.AgentProp_init_y_get, _core.AgentProp_init_y_set)
    __swig_setmethods__["init_theta"] = _core.AgentProp_init_theta_set
    __swig_getmethods__["init_theta"] = _core.AgentProp_init_theta_get
    if _newclass:
        init_theta = _swig_property(_core.AgentProp_init_theta_get, _core.AgentProp_init_theta_set)
    __swig_setmethods__["init_vel_b"] = _core.AgentProp_init_vel_b_set
    __swig_getmethods__["init_vel_b"] = _core.AgentProp_init_vel_b_get
    if _newclass:
        init_vel_b = _swig_property(_core.AgentProp_init_vel_b_get, _core.AgentProp_init_vel_b_set)
    __swig_setmethods__["init_phi"] = _core.AgentProp_init_phi_set
    __swig_getmethods__["init_phi"] = _core.AgentProp_init_phi_get
    if _newclass:
        init_phi = _swig_property(_core.AgentProp_init_phi_get, _core.AgentProp_init_phi_set)
    __swig_setmethods__["init_movable"] = _core.AgentProp_init_movable_set
    __swig_getmethods__["init_movable"] = _core.AgentProp_init_movable_get
    if _newclass:
        init_movable = _swig_property(_core.AgentProp_init_movable_get, _core.AgentProp_init_movable_set)
    __swig_setmethods__["init_target_x"] = _core.AgentProp_init_target_x_set
    __swig_getmethods__["init_target_x"] = _core.AgentProp_init_target_x_get
    if _newclass:
        init_target_x = _swig_property(_core.AgentProp_init_target_x_get, _core.AgentProp_init_target_x_set)
    __swig_setmethods__["init_target_y"] = _core.AgentProp_init_target_y_set
    __swig_getmethods__["init_target_y"] = _core.AgentProp_init_target_y_get
    if _newclass:
        init_target_y = _swig_property(_core.AgentProp_init_target_y_get, _core.AgentProp_init_target_y_set)

    def __init__(self):
        this = _core.new_AgentProp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _core.delete_AgentProp
    __del__ = lambda self: None
AgentProp_swigregister = _core.AgentProp_swigregister
AgentProp_swigregister(AgentProp)

class AgentState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _core.AgentState_x_set
    __swig_getmethods__["x"] = _core.AgentState_x_get
    if _newclass:
        x = _swig_property(_core.AgentState_x_get, _core.AgentState_x_set)
    __swig_setmethods__["y"] = _core.AgentState_y_set
    __swig_getmethods__["y"] = _core.AgentState_y_get
    if _newclass:
        y = _swig_property(_core.AgentState_y_get, _core.AgentState_y_set)
    __swig_setmethods__["vel_b"] = _core.AgentState_vel_b_set
    __swig_getmethods__["vel_b"] = _core.AgentState_vel_b_get
    if _newclass:
        vel_b = _swig_property(_core.AgentState_vel_b_get, _core.AgentState_vel_b_set)
    __swig_setmethods__["theta"] = _core.AgentState_theta_set
    __swig_getmethods__["theta"] = _core.AgentState_theta_get
    if _newclass:
        theta = _swig_property(_core.AgentState_theta_get, _core.AgentState_theta_set)
    __swig_setmethods__["phi"] = _core.AgentState_phi_set
    __swig_getmethods__["phi"] = _core.AgentState_phi_get
    if _newclass:
        phi = _swig_property(_core.AgentState_phi_get, _core.AgentState_phi_set)
    __swig_setmethods__["enable"] = _core.AgentState_enable_set
    __swig_getmethods__["enable"] = _core.AgentState_enable_get
    if _newclass:
        enable = _swig_property(_core.AgentState_enable_get, _core.AgentState_enable_set)
    __swig_setmethods__["movable"] = _core.AgentState_movable_set
    __swig_getmethods__["movable"] = _core.AgentState_movable_get
    if _newclass:
        movable = _swig_property(_core.AgentState_movable_get, _core.AgentState_movable_set)
    __swig_setmethods__["crash"] = _core.AgentState_crash_set
    __swig_getmethods__["crash"] = _core.AgentState_crash_get
    if _newclass:
        crash = _swig_property(_core.AgentState_crash_get, _core.AgentState_crash_set)
    __swig_setmethods__["reach"] = _core.AgentState_reach_set
    __swig_getmethods__["reach"] = _core.AgentState_reach_get
    if _newclass:
        reach = _swig_property(_core.AgentState_reach_get, _core.AgentState_reach_set)
    __swig_setmethods__["target_x"] = _core.AgentState_target_x_set
    __swig_getmethods__["target_x"] = _core.AgentState_target_x_get
    if _newclass:
        target_x = _swig_property(_core.AgentState_target_x_get, _core.AgentState_target_x_set)
    __swig_setmethods__["target_y"] = _core.AgentState_target_y_set
    __swig_getmethods__["target_y"] = _core.AgentState_target_y_get
    if _newclass:
        target_y = _swig_property(_core.AgentState_target_y_get, _core.AgentState_target_y_set)

    def __init__(self):
        this = _core.new_AgentState()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _core.delete_AgentState
    __del__ = lambda self: None
AgentState_swigregister = _core.AgentState_swigregister
AgentState_swigregister(AgentState)

class Action(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctrl_vel"] = _core.Action_ctrl_vel_set
    __swig_getmethods__["ctrl_vel"] = _core.Action_ctrl_vel_get
    if _newclass:
        ctrl_vel = _swig_property(_core.Action_ctrl_vel_get, _core.Action_ctrl_vel_set)
    __swig_setmethods__["ctrl_phi"] = _core.Action_ctrl_phi_set
    __swig_getmethods__["ctrl_phi"] = _core.Action_ctrl_phi_get
    if _newclass:
        ctrl_phi = _swig_property(_core.Action_ctrl_phi_get, _core.Action_ctrl_phi_set)

    def __init__(self):
        this = _core.new_Action()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _core.delete_Action
    __del__ = lambda self: None
Action_swigregister = _core.Action_swigregister
Action_swigregister(Action)

class Observation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos_x"] = _core.Observation_pos_x_set
    __swig_getmethods__["pos_x"] = _core.Observation_pos_x_get
    if _newclass:
        pos_x = _swig_property(_core.Observation_pos_x_get, _core.Observation_pos_x_set)
    __swig_setmethods__["pos_y"] = _core.Observation_pos_y_set
    __swig_getmethods__["pos_y"] = _core.Observation_pos_y_get
    if _newclass:
        pos_y = _swig_property(_core.Observation_pos_y_get, _core.Observation_pos_y_set)
    __swig_setmethods__["pos_theta"] = _core.Observation_pos_theta_set
    __swig_getmethods__["pos_theta"] = _core.Observation_pos_theta_get
    if _newclass:
        pos_theta = _swig_property(_core.Observation_pos_theta_get, _core.Observation_pos_theta_set)
    __swig_setmethods__["pos_target_x"] = _core.Observation_pos_target_x_set
    __swig_getmethods__["pos_target_x"] = _core.Observation_pos_target_x_get
    if _newclass:
        pos_target_x = _swig_property(_core.Observation_pos_target_x_get, _core.Observation_pos_target_x_set)
    __swig_setmethods__["pos_target_y"] = _core.Observation_pos_target_y_set
    __swig_getmethods__["pos_target_y"] = _core.Observation_pos_target_y_get
    if _newclass:
        pos_target_y = _swig_property(_core.Observation_pos_target_y_get, _core.Observation_pos_target_y_set)
    __swig_setmethods__["laser_data"] = _core.Observation_laser_data_set
    __swig_getmethods__["laser_data"] = _core.Observation_laser_data_get
    if _newclass:
        laser_data = _swig_property(_core.Observation_laser_data_get, _core.Observation_laser_data_set)

    def __init__(self):
        this = _core.new_Observation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _core.delete_Observation
    __del__ = lambda self: None
Observation_swigregister = _core.Observation_swigregister
Observation_swigregister(Observation)

class Agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)
    __repr__ = _swig_repr

    def __init__(self, prop):
        this = _core.new_Agent(prop)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_state(self, arg2):
        return _core.Agent_set_state(self, arg2)

    def check_AA_collisions(self, arg2):
        return _core.Agent_check_AA_collisions(self, arg2)

    def check_reach(self):
        return _core.Agent_check_reach(self)

    def laser_agent_agent(self, arg2):
        return _core.Agent_laser_agent_agent(self, arg2)
    __swig_setmethods__["prop"] = _core.Agent_prop_set
    __swig_getmethods__["prop"] = _core.Agent_prop_get
    if _newclass:
        prop = _swig_property(_core.Agent_prop_get, _core.Agent_prop_set)
    __swig_setmethods__["state"] = _core.Agent_state_set
    __swig_getmethods__["state"] = _core.Agent_state_get
    if _newclass:
        state = _swig_property(_core.Agent_state_get, _core.Agent_state_set)
    __swig_setmethods__["action"] = _core.Agent_action_set
    __swig_getmethods__["action"] = _core.Agent_action_get
    if _newclass:
        action = _swig_property(_core.Agent_action_get, _core.Agent_action_set)
    __swig_setmethods__["laser_state"] = _core.Agent_laser_state_set
    __swig_getmethods__["laser_state"] = _core.Agent_laser_state_get
    if _newclass:
        laser_state = _swig_property(_core.Agent_laser_state_get, _core.Agent_laser_state_set)
    __swig_destroy__ = _core.delete_Agent
    __del__ = lambda self: None
Agent_swigregister = _core.Agent_swigregister
Agent_swigregister(Agent)

class World(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        this = _core.new_World(arg2, arg3)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def reset_total_time(self):
        return _core.World_reset_total_time(self)

    def set_action(self, action_idx, vel, phi):
        return _core.World_set_action(self, action_idx, vel, phi)

    def set_state(self, state_idx, state):
        return _core.World_set_state(self, state_idx, state)

    def get_state(self, gstate_idx):
        return _core.World_get_state(self, gstate_idx)

    def get_states(self):
        return _core.World_get_states(self)

    def get_obs(self, arg2):
        return _core.World_get_obs(self, arg2)

    def get_agent(self, agent_idx):
        return _core.World_get_agent(self, agent_idx)

    def get_total_time(self):
        return _core.World_get_total_time(self)

    def set_total_time(self, time):
        return _core.World_set_total_time(self, time)

    def step(self, arg2):
        return _core.World_step(self, arg2)

    def update_laser_state(self, arg2):
        return _core.World_update_laser_state(self, arg2)

    def apply_action(self):
        return _core.World_apply_action(self)

    def integrate_state(self):
        return _core.World_integrate_state(self)

    def check_collisions(self):
        return _core.World_check_collisions(self)

    def check_reach(self):
        return _core.World_check_reach(self)
    __swig_setmethods__["agents"] = _core.World_agents_set
    __swig_getmethods__["agents"] = _core.World_agents_get
    if _newclass:
        agents = _swig_property(_core.World_agents_get, _core.World_agents_set)
    __swig_setmethods__["agent_num"] = _core.World_agent_num_set
    __swig_getmethods__["agent_num"] = _core.World_agent_num_get
    if _newclass:
        agent_num = _swig_property(_core.World_agent_num_get, _core.World_agent_num_set)
    __swig_setmethods__["total_time"] = _core.World_total_time_set
    __swig_getmethods__["total_time"] = _core.World_total_time_get
    if _newclass:
        total_time = _swig_property(_core.World_total_time_get, _core.World_total_time_set)
    __swig_setmethods__["dt"] = _core.World_dt_set
    __swig_getmethods__["dt"] = _core.World_dt_get
    if _newclass:
        dt = _swig_property(_core.World_dt_get, _core.World_dt_set)
    __swig_destroy__ = _core.delete_World
    __del__ = lambda self: None
World_swigregister = _core.World_swigregister
World_swigregister(World)

# This file is compatible with both classic and new-style classes.


